// Generated by CoffeeScript 1.9.2
(function() {
  var $, NO_ITEMS, REQUEST_KEY, attachFile, attachPost, nameGenerator, render, renderAttachment, renderRenamed, renderString, renderers, selectFile, selectPost, wpLinksets;

  $ = jQuery;

  REQUEST_KEY = 'linkset';

  NO_ITEMS = 'no-items';

  wpLinksets = {
    POST_THUMBNAIL_URL_STRUCT: ''
  };

  selectFile = function(onSelect, options) {
    var frame;
    if (frame) {
      frame.open();
      return;
    }
    frame = wp.media({
      title: options.title || 'Select file',
      button: {
        text: 'Select'
      },
      library: {
        type: options.type
      },
      multiple: options.multiple
    });
    frame.on('open', function() {
      var file, selection;
      if (options.selected) {
        selection = frame.state().get('selection');
        file = wp.media.attachment(options.selected);
        file.fetch();
        console.log('fetched: ', file);
        if (file) {
          selection.add([file]);
        }
      }
    });
    frame.on('select', function() {
      var selected;
      selected = frame.state().get('selection').map(function(model) {
        return model.toJSON();
      });
      if (typeof onSelect === 'function') {
        onSelect(selected);
      }
    });
    return frame.open();
  };

  selectPost = function(onSelect, options) {
    var dialog;
    if ($('#find-posts').size() === 0) {
      $('body').append(render('find-posts'));
    }
    dialog = $('#find-posts');
    dialog.find('#find-posts-submit').unbind('click').bind('click', function(e) {
      var input, label, selected;
      e.preventDefault();
      input = dialog.find('[name="found_post_id"]:checked');
      if (input.size()) {
        label = dialog.find('label[for="' + input.attr('id') + '"]');
        selected = {
          id: parseInt(input.val(), 10),
          title: label.text()
        };
        $(this).unbind('click');
        findPosts.close();
        if (typeof onSelect === 'function') {
          onSelect(selected);
        }
      }
    });
    dialog.find('#find-posts-close').unbind('click').bind('click', function(e) {
      e.preventDefault();
      findPosts.close();
    });
    return findPosts.open();
  };

  renderers = {
    youtube: function(el, data) {
      var loadDefaultThumb, model;
      model = el.find('[name*="video_id"]:input');
      loadDefaultThumb = function() {
        var src, thumb_id;
        src = "http://img.youtube.com/vi/" + (model.val()) + "/default.jpg";
        thumb_id = el.find('[name*="thumb_id"]:input').val();
        if (typeof console !== "undefined" && console !== null) {
          console.log(thumb_id);
        }
        if ($.trim(thumb_id) === '') {
          el.find('img').attr('src', src);
        }
      };
      model.change(loadDefaultThumb);
      loadDefaultThumb();
    }
  };

  renderAttachment = function(data) {
    var li, list, model, type;
    if (typeof data === 'string') {
      data = {
        type: data
      };
    }
    type = data.type;
    list = $('#wpPostAttachments-list');
    li = renderRenamed('item', data);
    li.appendTo(list);
    model = $.extend(true, {}, data);
    li.data('linksetItem', model);
    list.removeClass(NO_ITEMS);
    if (typeof renderers[type] === 'function') {
      renderers[type](li, data);
    }
    return li;
  };

  attachFile = function(type) {
    return selectFile(function(selected) {
      return _.each(selected, function(file) {
        if (typeof console !== "undefined" && console !== null) {
          console.log(file);
        }
        return renderAttachment({
          type: type != null ? type : 'file',
          id: file.id,
          title: file.title,
          description: file.description,
          thumb_url: file.sizes ? file.sizes.thumbnail.url : file.thumb_src,
          file: file
        });
      });
    }, {
      type: type,
      multiple: true
    });
  };

  attachPost = function() {
    return selectPost(function(post) {
      var thumbUrl;
      thumbUrl = wpLinksets.POST_THUMBNAIL_URL_STRUCT.replace(/%post_id%/g, post.id).replace(/%size%/g, 'thumbnail');
      return renderAttachment({
        type: 'post',
        id: post.id,
        title: post.title,
        thumb_url: thumbUrl
      });
    });
  };

  renderRenamed = function(name, data) {
    var el;
    nameGenerator.next();
    if (typeof console !== "undefined" && console !== null) {
      console.log('renderRenamed', name, data);
    }
    el = render(name, data);
    el.find('[name]').each(function() {
      var $this;
      $this = $(this);
      return $this.attr('name', nameGenerator.name($this.attr('name')));
    });
    return el;
  };

  nameGenerator = {
    _counter: 0,
    name: function(n) {
      return REQUEST_KEY + ("[" + this._counter + "][" + n + "]");
    },
    next: function() {
      return ++this._counter;
    }
  };

  render = function(name, data) {
    var el, template;
    template = wp.template("wpPostAttachments-" + name);
    data = $.extend({
      $: $,
      jQuery: $,
      render: render,
      renderString: renderString
    }, data);
    return el = $(template(data));
  };

  renderString = function(name, data) {
    return $('<div/>').append(render(name, data)).html();
  };

  $(function() {
    var template;
    template = wp.template("wpPostAttachments-main");
    $('#post-attachments-metabox').html(template({
      render: render,
      renderString: renderString
    }));
    if (typeof console !== "undefined" && console !== null) {
      console.log(wpLinksets.linkset);
    }
    _.each(wpLinksets.linkset, renderAttachment);
    $('#post-attachments-metabox').on('click', '[data-action="attach-link"]', function() {
      renderAttachment('link');
      return false;
    }).on('click', '[data-action="attach-file"]', function() {
      attachFile();
      return false;
    }).on('click', '[data-action="attach-audio"]', function() {
      attachFile('audio');
      return false;
    }).on('click', '[data-action="attach-youtube"]', function() {
      renderAttachment('youtube');
      return false;
    }).on('click', '[data-action="attach-post"]', function() {
      attachPost();
      return false;
    }).on('click', '[data-action="attachment-delete"]', function() {
      var li, li2, tpl;
      li = $(this).closest('li');
      li2 = $('<li class="wppa-link" />');
      tpl = wp.template("wpPostAttachments-undo");
      li2.append(tpl());
      li2.outerWidth(li.outerWidth());
      li2.outerHeight(li.outerHeight());
      li.replaceWith(li2);
      li2.data('origLI', li);
      return false;
    }).on('click', '[data-action="delete-undo"]', function() {
      var li;
      li = $(this).closest('li');
      li.replaceWith(li.data('origLI'));
      li.remove();
      return false;
    }).on('click', '[data-action="delete-confirm"]', function() {
      var li;
      li = $(this).closest('li');
      li.animate({
        outerHeight: 0,
        height: 0,
        opacity: 0,
        paddingTop: 0,
        paddingBottom: 0
      }, function() {
        var list;
        $(this).remove();
        list = $('#wpPostAttachments-list');
        if (list.children(':not(.linkset-item-empty)').size() === 0) {
          return list.addClass(NO_ITEMS);
        }
      });
      return false;
    }).on('click', '[data-action="thumb-select"]', function() {
      var item, thumb;
      item = $(this).closest('.linkset-item');
      thumb = item.find('[name*="thumb_id"]').val();
      selectFile((function(_this) {
        return function(selection) {
          var img, model, selectedImage;
          selectedImage = selection[0];
          if (typeof console !== "undefined" && console !== null) {
            console.log(selectedImage, _this);
          }
          thumb = selectedImage.sizes.thumbnail ? selectedImage.sizes.thumbnail : selectedImage.sizes.full;
          img = item.find('img').attr('src', thumb.url);
          img.replaceWith(img.clone());
          item.find('[name*="thumb_id"]').val(selectedImage.id);
          item.addClass('has-thumb');
          model = item.data('linksetItem');
          model.thumb_id = selectedImage.id;
          model.thumb_url = thumb.url;
          item.removeClass('has-thumb-restore');
          return item.removeData('thumb_restore');
        };
      })(this), {
        type: 'image',
        multiple: false,
        selected: thumb
      });
      return false;
    }).on('click', '[data-action="thumb-delete"]', function() {
      var data, item;
      item = $(this).closest('.linkset-item');
      data = item.data('linksetItem');
      if (data.thumb_id) {
        item.data('thumb_restore', {
          thumb_id: data.thumb_id,
          thumb_url: data.thumb_url
        });
        item.addClass('has-thumb-restore');
      }
      item.find('img').attr('src', '');
      item.find('[name*="thumb_id"]').val('');
      item.removeClass('has-thumb');
      return false;
    }).on('click', '[data-action="thumb-restore"]', function() {
      var data, item;
      item = $(this).closest('.linkset-item');
      data = item.data('thumb_restore');
      if (data.thumb_id) {
        item.find('img').attr('src', data.thumb_url);
        item.find('[name*="thumb_id"]').val(data.thumb_id);
        item.addClass('has-thumb');
      }
      item.removeClass('has-thumb-restore');
      item.removeData('thumb_restore');
      return false;
    });
    $('#wpPostAttachments-list').sortable();
  });

  wpLinksets.render = render;

  wpLinksets.selectFile = selectFile;

  wpLinksets.selectPost = selectPost;

  this.wpLinksets = wpLinksets;

}).call(this);

//# sourceMappingURL=main.js.map
