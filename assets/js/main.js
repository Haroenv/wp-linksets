// Generated by CoffeeScript 1.7.1
(function() {
  var $, attachFile, attachLink, attachYoutube, createFileFields, createLinkFields, createYoutubeFields, nameGenerator, render, renderAttachment, renderString, selectFile;

  $ = jQuery;

  selectFile = function(onSelect, options) {
    var frame;
    if (frame) {
      frame.open();
      return;
    }
    frame = wp.media({
      title: options.title || 'Select file',
      button: {
        text: 'Select'
      },
      library: {
        type: options.type
      },
      multiple: options.multiple
    });
    frame.on('open', function() {
      var selection;
      selection = frame.state().get('selection');
    });
    frame.on('select', function() {
      var selected;
      selected = frame.state().get('selection').map(function(model) {
        return model.toJSON();
      });
      if (typeof onSelect === 'function') {
        onSelect(selected);
      }
    });
    return frame.open();
  };

  renderAttachment = function(type, data) {
    var li;
    li = $('<li/>');
    li.append(render(type, data));
    li.appendTo('#wpPostAttachments-list');
  };

  createLinkFields = function() {
    renderAttachment('link');
  };

  createFileFields = function(type, file) {
    if (typeof console !== "undefined" && console !== null) {
      console.log(type, file);
    }
    renderAttachment(type != null ? type : 'file', {
      file: file,
      file_id: file.id,
      title: file.title,
      description: file.description
    });
  };

  createYoutubeFields = function() {
    renderAttachment('youtube');
  };

  attachFile = function(type) {
    return selectFile(function(selected) {
      if (selected.length === 0) {
        return;
      }
      return createFileFields(type, selected[0]);
    }, {
      type: type
    });
  };

  attachYoutube = function() {
    return createYoutubeFields();
  };

  attachLink = function() {
    return createLinkFields();
  };

  nameGenerator = {
    _counter: 0,
    name: function(n) {
      return "post_attachments[" + this._counter + "][" + n + "]";
    },
    next: function() {
      return ++this._counter;
    }
  };

  render = function(name, data) {
    var el, template;
    nameGenerator.next();
    template = wp.template("wpPostAttachments-" + name);
    data = $.extend({
      $: $,
      jQuery: $,
      render: render,
      renderString: renderString
    }, data);
    el = $(template(data));
    el.find('[name]').each(function() {
      var $this;
      $this = $(this);
      return $this.attr('name', nameGenerator.name($this.attr('name')));
    });
    return el;
  };

  renderString = function(name, data) {
    return $('<div/>').append(render(name, data)).html();
  };

  $(function() {
    var template;
    template = wp.template("wpPostAttachments-main");
    $('#post-attachments-metabox').html(template({
      render: render,
      renderString: renderString
    }));
    if (typeof console !== "undefined" && console !== null) {
      console.log(window.postAttachments);
    }
    _.each(window.postAttachments, function(attachment) {
      return renderAttachment(attachment.type, attachment);
    });
    $('#post-attachments-metabox').on('click', '[data-action="attach-link"]', function() {
      return attachLink();
    }).on('click', '[data-action="attach-file"]', function() {
      return attachFile();
    }).on('click', '[data-action="attach-audio"]', function() {
      return attachFile('audio');
    }).on('click', '[data-action="attach-youtube"]', function() {
      return attachYoutube();
    });
    $('#wpPostAttachments-list').sortable();
  });

  this.selectFile = selectFile;

  this.wpPostAttachments = {
    render: render
  };

}).call(this);
