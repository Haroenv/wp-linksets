// Generated by CoffeeScript 1.9.2
(function() {
  var $, attachFile, nameGenerator, render, renderAttachment, renderString, renderers, selectFile;

  $ = jQuery;

  selectFile = function(onSelect, options) {
    var frame;
    if (frame) {
      frame.open();
      return;
    }
    frame = wp.media({
      title: options.title || 'Select file',
      button: {
        text: 'Select'
      },
      library: {
        type: options.type
      },
      multiple: options.multiple
    });
    frame.on('open', function() {
      var selection;
      selection = frame.state().get('selection');
    });
    frame.on('select', function() {
      var selected;
      selected = frame.state().get('selection').map(function(model) {
        return model.toJSON();
      });
      if (typeof onSelect === 'function') {
        onSelect(selected);
      }
    });
    return frame.open();
  };

  renderers = {
    youtube: function(el, data) {
      var loadDefaultThumb, model;
      model = el.find('[name*="video_id"]:input');
      loadDefaultThumb = function() {
        var src;
        src = "http://img.youtube.com/vi/" + (model.val()) + "/default.jpg";
        $('<img/>').attr('src', src).prependTo(el);
      };
      model.change(loadDefaultThumb);
      loadDefaultThumb();
    }
  };

  renderAttachment = function(type, data) {
    var el, li;
    li = $('<li class="wppa-link" />');
    li.appendTo('#wpPostAttachments-list');
    li.append((el = render(type, data)));
    if (typeof renderers[type] === 'function') {
      renderers[type](el, data);
    }
    return li;
  };

  attachFile = function(type) {
    return selectFile(function(selected) {
      return _.each(selected, function(file) {
        if (typeof console !== "undefined" && console !== null) {
          console.log(file);
        }
        return renderAttachment(type != null ? type : 'file', {
          file: file,
          file_id: file.id,
          title: file.title,
          description: file.description,
          thumb_url: file.sizes ? file.sizes.thumbnail.url : file.thumb_src
        });
      });
    }, {
      type: type,
      multiple: true
    });
  };

  nameGenerator = {
    _counter: 0,
    name: function(n) {
      return "post_links[" + this._counter + "][" + n + "]";
    },
    next: function() {
      return ++this._counter;
    }
  };

  render = function(name, data) {
    var el, template;
    nameGenerator.next();
    template = wp.template("wpPostAttachments-" + name);
    data = $.extend({
      $: $,
      jQuery: $,
      render: render,
      renderString: renderString
    }, data);
    el = $(template(data));
    el.find('[name]').each(function() {
      var $this;
      $this = $(this);
      return $this.attr('name', nameGenerator.name($this.attr('name')));
    });
    return el;
  };

  renderString = function(name, data) {
    return $('<div/>').append(render(name, data)).html();
  };

  $(function() {
    var template;
    template = wp.template("wpPostAttachments-main");
    $('#post-attachments-metabox').html(template({
      render: render,
      renderString: renderString
    }));
    if (typeof console !== "undefined" && console !== null) {
      console.log(window.postAttachments);
    }
    _.each(window.postAttachments, function(attachment) {
      return renderAttachment(attachment.type, attachment);
    });
    $('#post-attachments-metabox').on('click', '[data-action="attach-link"]', function() {
      renderAttachment('link');
      return false;
    }).on('click', '[data-action="attach-file"]', function() {
      attachFile();
      return false;
    }).on('click', '[data-action="attach-audio"]', function() {
      attachFile('audio');
      return false;
    }).on('click', '[data-action="attach-youtube"]', function() {
      renderAttachment('youtube');
      return false;
    }).on('click', '[data-action="attachment-delete"]', function() {
      var li, li2, tpl;
      li = $(this).closest('li');
      li2 = $('<li class="wppa-link" />');
      tpl = wp.template("wpPostAttachments-undo");
      li2.append(tpl());
      li2.outerWidth(li.outerWidth());
      li2.outerHeight(li.outerHeight());
      li.replaceWith(li2);
      li2.data('origLI', li);
      return false;
    }).on('click', '[data-action="delete-undo"]', function() {
      var li;
      li = $(this).closest('li');
      li.replaceWith(li.data('origLI'));
      li.remove();
      return false;
    }).on('click', '[data-action="delete-confirm"]', function() {
      var li;
      li = $(this).closest('li');
      li.animate({
        outerHeight: 0,
        opacity: 0
      }, function() {
        return $(this).remove();
      });
      return false;
    });
    $('#wpPostAttachments-list').sortable();
  });

  this.selectFile = selectFile;

  this.wpPostAttachments = {
    render: render
  };

}).call(this);

//# sourceMappingURL=main.js.map
